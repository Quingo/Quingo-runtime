import std_ops
import cphases

// QFT without the trailing swap gates
// least significant bit is 0, and the most significant bit is n - 1
operation qft_ns(qubits: qubit[]): unit {
    int num_qubits = qubits.length;
    for (int i = num_qubits - 1; i >= 0; i -= 1) {
        H(qubits[i]);
        for (int j = i - 1; j >= 0; j -= 1) {
            c_phase_k(qubits[j], qubits[i], i - j + 1);
        }
    }
}

// IQFT without the leading swap gates
// Note, the qubits are assumed to be arranged in the little endian format,
// i.e., least significant qubit is 0, and most significant qubit is n - 1
operation iqft_ns(qubits : qubit[]) : unit {
    int num_qubits = qubits.length;
    for (int i = 0; i < num_qubits; i += 1) {
        for (int j = 0; j < i; j += 1) {
            c_phase_k_m(qubits[j], qubits[i], i - j + 1);
        }
        H(qubits[i]);
    }
}

operation rev_qubit_order(qubits: qubit[]): unit {
    int num_qubits = qubits.length;
    for (int i = 0; i < num_qubits / 2; i += 1) {
        SWAP(qubits[i], qubits[num_qubits - i - 1]);
    }
}

// least significant bit is 0, and the most significant bit is n - 1
operation qft(qubits: qubit[]): unit {
    qft_ns(qubits);
    rev_qubit_order(qubits);
}

// Note, the qubits are assumed to be arranged in the little endian format,
// i.e., least significant qubit is 0, and most significant qubit is n - 1
operation iqft(qubits : qubit[]) : unit {
    rev_qubit_order(qubits);
    iqft_ns(qubits);
}
import draper
import qft
import std_ops

operation test_adder(a: int[], b: int[]) : bool[] {
    int num_qubits = a.length;
    bool[num_qubits * 2] result;
    using (qa: qubit[num_qubits], qb: qubit[num_qubits]) {
        // load a and b into qubits
        for (int i = 0; i < num_qubits; i += 1) {
            if (b[i] == 1) {
                X(qb[i]);
            }
            if (a[i] == 1) {
                X(qa[i]);
            }
        }

        qft_ns(qb);
        draper_adder(qa, qb);
        iqft_ns(qb);

        // qft(qb);
        // draper_adder_reverse(qa, qb);
        // iqft(qb);

        for (int i = 0; i < num_qubits; i += 1) {
            result[i+num_qubits] = measure(qb[i]);
        }
    }
    return result;
}

operation test_sc_adder(a: int[], b: int[], is_subtract: bool) : bool[] {
    int num_qubits = b.length;
    bool[num_qubits] result;
    using (qa: qubit[num_qubits]) {
        for (int i = 0; i < num_qubits; i += 1) {
            if (a[i] == 1) {
                X(qa[i]);
            }
        }

        qft_ns(qa);
        sc_adder(qa, b, is_subtract);
        iqft_ns(qa);

        for (int i = 0; i < num_qubits; i += 1) {
            result[i] = measure(qa[i]);
        }
    }
    return result;
}

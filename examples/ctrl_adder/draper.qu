import std_ops
import cphases
import qft

// paper order
operation draper_adder(a: qubit[], b: qubit[]) : unit {
    int size = a.length;
    for (int i = size - 1; i >= 0; i -= 1) { // qubit b_{n-1}

        for (int j = i; j >= 0; j -= 1) {  // qubit a{j}
            c_phase_k(a[j], b[i], i - j + 1);
        }
    }
}

// cross order:
// a[n-1] corresponds to b[0]
// a[n-2] corresponds to b[1]
//           ...
// a[  0] corresponds to b[n-1]
operation draper_adder_reverse(a: qubit[], b: qubit[]) : unit {
    int size = a.length;
    for (int i = size - 1; i >= 0; i -= 1) { // qubit b_{n-1}
        for (int j = i; j >= 0; j -= 1) {  // qubit a{j}
            c_phase_k(a[j], b[size - i - 1], i - j + 1);
        }
    }
}


// if reverse is true, and perform b - a -> b
// if reverse is false, and perform b + a -> b
operation sc_adder(qb: qubit[], a: int[], reverse: bool) : unit {
    int size = a.length;
    for (int i = size - 1; i >= 0; i -= 1) { // qubit b_{n-1}
        double sum = 0.0;
        for (int j = i; j >= 0; j -= 1) {  // qubit a{j}
            if (a[j] == 1) {
                sum += 1.0 / toDouble(power_of_2(i - j + 1));
            }
        }
        double angle = 2.0 * pi * sum;
        if (reverse) {
            angle = - angle;
        }
        P(qb[i], angle);
    }
}

